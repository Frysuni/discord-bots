import SimpleMusicPlayer from './lib';
import { ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder, InteractionReplyOptions, MessageCreateOptions } from 'discord.js';
import { music, TypeOfProcessing } from './lib/types';

export const musicPlayer = new SimpleMusicPlayer();

export function musicControlReply() {
    const state = musicPlayer.state();
    if (!state.inVoice) return { ephemeral: true, content: '–ë–æ—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ –∏ –Ω–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –º—É–∑—ã–∫—É.' } as InteractionReplyOptions;

    const embed = new EmbedBuilder()
        .setTitle('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—É–∑–∫–æ–π')
        .setColor('Blue')
        .addFields({ name: '\u200B', value:
            (state.paused ? '‚ñ∂Ô∏è - **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º—É–∑—ã–∫—É.**' : '‚è∏ - **–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É.**\n') +
            '‚è≠ - **–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–∫.**\n' +
            'üìã - **–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –º—É–∑—ã–∫–∏.**\n' +
            '‚èπ - **–í—ã–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É –∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞.**'
        });


    const controlButtons = new ActionRowBuilder<ButtonBuilder>()
        .addComponents(
            new ButtonBuilder()
                .setCustomId(state.paused ? 'unpause' : 'pause')
                .setEmoji(state.paused ? '‚ñ∂Ô∏è' : '‚è∏')
                .setStyle(state.paused ? ButtonStyle.Success : ButtonStyle.Secondary),
            new ButtonBuilder()
                .setCustomId('skip')
                .setEmoji('‚è≠')
                .setStyle(ButtonStyle.Secondary),
            new ButtonBuilder()
                .setCustomId('queue')
                .setEmoji('üìã')
                .setStyle(ButtonStyle.Secondary),
            new ButtonBuilder()
                .setCustomId('stop')
                .setEmoji('‚èπ')
                .setStyle(ButtonStyle.Danger)
            );

    return { embeds: [embed], components: [controlButtons] } as InteractionReplyOptions & MessageCreateOptions;
}

export function newMusicReply(music: { process: TypeOfProcessing, result: music, position: number }) {
    const embed = new EmbedBuilder()
        .setColor('#f90606')
        .setAuthor({ name: 'YouTube: ' + music.result.video.author.name, url: music.result.video.author.url })
        .setTitle(music.result.video.title)
        .setURL(music.result.url)
        .addFields({
            name: (() => {
                if (music.process == TypeOfProcessing.Started) return '–ú—É–∑—ã–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.';
                if (music.process == TypeOfProcessing.Resumed) return '–ë–æ—Ç —Å–Ω—è—Ç —Å –ø–∞—É–∑—ã –∏ –≤–∫–ª—é—á–µ–Ω–∞ –¥–∞–Ω–Ω–∞—è –º—É–∑—ã–∫–∞.';
                if (music.process == TypeOfProcessing.Added) return `–ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: \`${music.position}\``;
                if (music.process == TypeOfProcessing.NowPlaying) return '–ò–≥—Ä–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∞—è –º—É–∑—ã–∫–∞!';
            })(),
            value: `–î–ª–∏–Ω–∞ –º—É–∑—ã–∫–∏: \`${music.result.video.length.time}\`` })
        .setThumbnail(music.result.video.thumbnail)
        .setFooter({ text: `–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${music.result.video.views} –õ–∞–π–∫–æ–≤: ${music.result.video.likes}` });

    return { embeds: [embed] } as InteractionReplyOptions & MessageCreateOptions;
}

export function queueReply() {
    const embed = new EmbedBuilder()
        .setColor('Blue')
        .addFields({ name: '–û—á–µ—Ä–µ–¥—å –º—É–∑—ã–∫–∏.',
            value: (() => {
                if (musicPlayer.queue.length == 0) return '–í –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç –º—É–∑—ã–∫–∏.';
                let i = 1;
                let result = '';
                musicPlayer.queue.forEach(music => {
                    if (i > 5) return;
                    result += `${i}. **[${music.video.title}](${music.url})** - \`${music.video.length.time}\`\n`;
                    i++;
                });
                if (i > 5) result += '...';
                return result;
            })()
        });

    return { embeds: [embed] } as InteractionReplyOptions & MessageCreateOptions;
}